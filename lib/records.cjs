const {
  Tuple
} = require("@bloomberg/record-tuple-polyfill");
class Records {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        if (prop in target) {
          return target[prop];
        } else if (Number(prop) !== NaN) {
          const arr = [...target];
          const index = Number(prop) < 0 ? arr.length - prop : prop;
          return arr[index];
        }
      }
    });
  }
  #records = new Map();
  [Symbol.iterator] = () => {
    return this.#records.values();
  };
  get length() {
    return Array.from(this.#records.values()).length;
  }
  add = (...records) => {
    records.flat().forEach(record => {
      this.#records.set(this.#key(record), record);
    });
  };
  remove = record => {
    return this.#records.delete(this.#key(record));
  };
  get = record => {
    return this.#records.get(this.#key(record));
  };
  has = record => {
    return this.#records.has(this.#key(record));
  };
  clear = () => {
    this.#records.clear();
  };
  forEach = callback => {
    const arr = Array.from(this.#records.values());
    for (const i in arr) {
      callback(arr[i], i, arr);
    }
  };
  #key = record => {
    return Tuple(record.type, record.id);
  };
}
class RecordsProxy {
  constructor() {
    return new Proxy();
  }
}
module.exports = Records;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUdXBsZSIsInJlcXVpcmUiLCJSZWNvcmRzIiwiY29uc3RydWN0b3IiLCJQcm94eSIsImdldCIsInRhcmdldCIsInByb3AiLCJOdW1iZXIiLCJOYU4iLCJhcnIiLCJpbmRleCIsImxlbmd0aCIsInJlY29yZHMiLCJNYXAiLCJTeW1ib2wiLCJpdGVyYXRvciIsInZhbHVlcyIsIkFycmF5IiwiZnJvbSIsImFkZCIsImZsYXQiLCJmb3JFYWNoIiwicmVjb3JkIiwic2V0Iiwia2V5IiwicmVtb3ZlIiwiZGVsZXRlIiwiaGFzIiwiY2xlYXIiLCJjYWxsYmFjayIsImkiLCJ0eXBlIiwiaWQiLCJSZWNvcmRzUHJveHkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vc3JjL3JlY29yZHMuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgVHVwbGUgfSA9IHJlcXVpcmUoXCJAYmxvb21iZXJnL3JlY29yZC10dXBsZS1wb2x5ZmlsbFwiKVxuXG5jbGFzcyBSZWNvcmRzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XG4gICAgICAgICAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICAgICAgaWYocHJvcCBpbiB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKE51bWJlcihwcm9wKSAhPT0gTmFOKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyciA9IFsuLi50YXJnZXRdXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gTnVtYmVyKHByb3ApIDwgMCA/IGFyci5sZW5ndGggLSBwcm9wIDogcHJvcFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyW2luZGV4XVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgI3JlY29yZHMgPSBuZXcgTWFwKCk7XG5cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3JlY29yZHMudmFsdWVzKCk7XG4gICAgfVxuXG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy4jcmVjb3Jkcy52YWx1ZXMoKSkubGVuZ3RoXG4gICAgfVxuXG4gICAgYWRkID0gKC4uLnJlY29yZHMpID0+IHtcbiAgICAgICAgcmVjb3Jkcy5mbGF0KCkuZm9yRWFjaChyZWNvcmQgPT4ge1xuICAgICAgICAgICAgdGhpcy4jcmVjb3Jkcy5zZXQodGhpcy4ja2V5KHJlY29yZCksIHJlY29yZClcbiAgICAgICAgfSlcbiAgICB9XG4gICAgcmVtb3ZlID0gKHJlY29yZCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy4jcmVjb3Jkcy5kZWxldGUodGhpcy4ja2V5KHJlY29yZCkpXG4gICAgfVxuICAgIGdldCA9IChyZWNvcmQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3JlY29yZHMuZ2V0KHRoaXMuI2tleShyZWNvcmQpKVxuICAgIH1cbiAgICBoYXMgPSAocmVjb3JkKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLiNyZWNvcmRzLmhhcyh0aGlzLiNrZXkocmVjb3JkKSlcbiAgICB9XG4gICAgY2xlYXIgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuI3JlY29yZHMuY2xlYXIoKVxuICAgIH1cbiAgICBmb3JFYWNoID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNvbnN0IGFyciA9IEFycmF5LmZyb20odGhpcy4jcmVjb3Jkcy52YWx1ZXMoKSlcbiAgICAgICAgZm9yKGNvbnN0IGkgaW4gYXJyKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhhcnJbaV0sIGksIGFycilcbiAgICAgICAgfVxuICAgIH1cblxuICAgICNrZXkgPSAocmVjb3JkKSA9PiB7XG4gICAgICAgIHJldHVybiBUdXBsZShyZWNvcmQudHlwZSwgcmVjb3JkLmlkKVxuICAgIH1cbn1cblxuY2xhc3MgUmVjb3Jkc1Byb3h5IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSgpXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlY29yZHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU07RUFBRUE7QUFBTSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQztBQUU3RCxNQUFNQyxPQUFPLENBQUM7RUFDVkMsV0FBVyxHQUFHO0lBQ1YsT0FBTyxJQUFJQyxLQUFLLENBQUMsSUFBSSxFQUFFO01BQ25CQyxHQUFHLENBQUNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFO1FBQ2QsSUFBR0EsSUFBSSxJQUFJRCxNQUFNLEVBQUU7VUFDZixPQUFPQSxNQUFNLENBQUNDLElBQUksQ0FBQztRQUN2QixDQUFDLE1BQ0ksSUFBR0MsTUFBTSxDQUFDRCxJQUFJLENBQUMsS0FBS0UsR0FBRyxFQUFFO1VBQzFCLE1BQU1DLEdBQUcsR0FBRyxDQUFDLEdBQUdKLE1BQU0sQ0FBQztVQUN2QixNQUFNSyxLQUFLLEdBQUdILE1BQU0sQ0FBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHRyxHQUFHLENBQUNFLE1BQU0sR0FBR0wsSUFBSSxHQUFHQSxJQUFJO1VBQ3pELE9BQU9HLEdBQUcsQ0FBQ0MsS0FBSyxDQUFDO1FBQ3JCO01BQ0o7SUFDSixDQUFDLENBQUM7RUFDTjtFQUVBLENBQUNFLE9BQU8sR0FBRyxJQUFJQyxHQUFHLEVBQUU7RUFFcEIsQ0FBQ0MsTUFBTSxDQUFDQyxRQUFRLElBQUksTUFBTTtJQUN0QixPQUFPLElBQUksQ0FBQyxDQUFDSCxPQUFPLENBQUNJLE1BQU0sRUFBRTtFQUNqQyxDQUFDO0VBRUQsSUFBSUwsTUFBTSxHQUFHO0lBQ1QsT0FBT00sS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUNOLE9BQU8sQ0FBQ0ksTUFBTSxFQUFFLENBQUMsQ0FBQ0wsTUFBTTtFQUNwRDtFQUVBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHUCxPQUFPLEtBQUs7SUFDbEJBLE9BQU8sQ0FBQ1EsSUFBSSxFQUFFLENBQUNDLE9BQU8sQ0FBQ0MsTUFBTSxJQUFJO01BQzdCLElBQUksQ0FBQyxDQUFDVixPQUFPLENBQUNXLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQ0MsR0FBRyxDQUFDRixNQUFNLENBQUMsRUFBRUEsTUFBTSxDQUFDO0lBQ2hELENBQUMsQ0FBQztFQUNOLENBQUM7RUFDREcsTUFBTSxHQUFJSCxNQUFNLElBQUs7SUFDakIsT0FBTyxJQUFJLENBQUMsQ0FBQ1YsT0FBTyxDQUFDYyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUNGLEdBQUcsQ0FBQ0YsTUFBTSxDQUFDLENBQUM7RUFDbEQsQ0FBQztFQUNEbEIsR0FBRyxHQUFJa0IsTUFBTSxJQUFLO0lBQ2QsT0FBTyxJQUFJLENBQUMsQ0FBQ1YsT0FBTyxDQUFDUixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUNvQixHQUFHLENBQUNGLE1BQU0sQ0FBQyxDQUFDO0VBQy9DLENBQUM7RUFDREssR0FBRyxHQUFJTCxNQUFNLElBQUs7SUFDZCxPQUFPLElBQUksQ0FBQyxDQUFDVixPQUFPLENBQUNlLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQ0gsR0FBRyxDQUFDRixNQUFNLENBQUMsQ0FBQztFQUMvQyxDQUFDO0VBQ0RNLEtBQUssR0FBRyxNQUFNO0lBQ1YsSUFBSSxDQUFDLENBQUNoQixPQUFPLENBQUNnQixLQUFLLEVBQUU7RUFDekIsQ0FBQztFQUNEUCxPQUFPLEdBQUlRLFFBQVEsSUFBSztJQUNwQixNQUFNcEIsR0FBRyxHQUFHUSxLQUFLLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQ04sT0FBTyxDQUFDSSxNQUFNLEVBQUUsQ0FBQztJQUM5QyxLQUFJLE1BQU1jLENBQUMsSUFBSXJCLEdBQUcsRUFBRTtNQUNoQm9CLFFBQVEsQ0FBQ3BCLEdBQUcsQ0FBQ3FCLENBQUMsQ0FBQyxFQUFFQSxDQUFDLEVBQUVyQixHQUFHLENBQUM7SUFDNUI7RUFDSixDQUFDO0VBRUQsQ0FBQ2UsR0FBRyxHQUFJRixNQUFNLElBQUs7SUFDZixPQUFPdkIsS0FBSyxDQUFDdUIsTUFBTSxDQUFDUyxJQUFJLEVBQUVULE1BQU0sQ0FBQ1UsRUFBRSxDQUFDO0VBQ3hDLENBQUM7QUFDTDtBQUVBLE1BQU1DLFlBQVksQ0FBQztFQUNmL0IsV0FBVyxHQUFHO0lBQ1YsT0FBTyxJQUFJQyxLQUFLLEVBQUU7RUFDdEI7QUFDSjtBQUVBK0IsTUFBTSxDQUFDQyxPQUFPLEdBQUdsQyxPQUFPIn0=