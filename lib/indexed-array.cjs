// Set but with custom keying and iterable
class KeyedSet {
  #key = () => {};
  #map = new Map();
  constructor(keyFunc) {
    this.#key = keyFunc;
    return new Proxy(this, {
      get(target, prop) {
        if (prop in target) {
          return target[prop];
        } else if (Number(prop) !== NaN) {
          const arr = [...target];
          const index = Number(prop) < 0 ? arr.length - prop : prop;
          return arr[index];
        }
      }
    });
  }
  [Symbol.iterator] = () => {
    return this.#map.values();
  };
  get length() {
    return Array.from(this.#map.values()).length;
  }
  add = (...values) => {
    values.flat().forEach(value => {
      this.#map.set(this.#key(value), value);
    });
  };
  clear = () => {
    this.#map.clear();
  };
  delete = value => {
    return this.#map.delete(this.#key(value));
  };
  entries = () => {
    return this.#map.entries();
  };
  forEach = callback => {
    const arr = Array.from(this.#map.values());
    for (const i in arr) {
      callback(arr[i], i, arr);
    }
  };
  get = value => {
    return this.#map.get(this.#key(value));
  };
  has = value => {
    return this.#map.has(this.#key(value));
  };
  keys = () => {
    return this.#map.keys();
  };
  values = () => {
    return this.#map.values();
  };
}
module.exports = KeyedSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJLZXllZFNldCIsImtleSIsIm1hcCIsIk1hcCIsImNvbnN0cnVjdG9yIiwia2V5RnVuYyIsIlByb3h5IiwiZ2V0IiwidGFyZ2V0IiwicHJvcCIsIk51bWJlciIsIk5hTiIsImFyciIsImluZGV4IiwibGVuZ3RoIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ2YWx1ZXMiLCJBcnJheSIsImZyb20iLCJhZGQiLCJmbGF0IiwiZm9yRWFjaCIsInZhbHVlIiwic2V0IiwiY2xlYXIiLCJkZWxldGUiLCJlbnRyaWVzIiwiY2FsbGJhY2siLCJpIiwiaGFzIiwia2V5cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi9zcmMvaW5kZXhlZC1hcnJheS5janMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU2V0IGJ1dCB3aXRoIGN1c3RvbSBrZXlpbmcgYW5kIGl0ZXJhYmxlXG5jbGFzcyBLZXllZFNldCB7XG4gICAgI2tleSA9ICgpID0+IHt9XG4gICAgI21hcCA9IG5ldyBNYXAoKTtcblxuICAgIGNvbnN0cnVjdG9yKGtleUZ1bmMpIHtcbiAgICAgICAgdGhpcy4ja2V5ID0ga2V5RnVuY1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcbiAgICAgICAgICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgICAgICBpZihwcm9wIGluIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoTnVtYmVyKHByb3ApICE9PSBOYU4pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJyID0gWy4uLnRhcmdldF1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBOdW1iZXIocHJvcCkgPCAwID8gYXJyLmxlbmd0aCAtIHByb3AgOiBwcm9wXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnJbaW5kZXhdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI21hcC52YWx1ZXMoKTtcbiAgICB9XG5cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLiNtYXAudmFsdWVzKCkpLmxlbmd0aFxuICAgIH1cblxuICAgIGFkZCA9ICguLi52YWx1ZXMpID0+IHtcbiAgICAgICAgdmFsdWVzLmZsYXQoKS5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMuI21hcC5zZXQodGhpcy4ja2V5KHZhbHVlKSwgdmFsdWUpXG4gICAgICAgIH0pXG4gICAgfVxuICAgIGNsZWFyID0gKCkgPT4ge1xuICAgICAgICB0aGlzLiNtYXAuY2xlYXIoKVxuICAgIH1cbiAgICBkZWxldGUgPSAodmFsdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI21hcC5kZWxldGUodGhpcy4ja2V5KHZhbHVlKSlcbiAgICB9XG4gICAgZW50cmllcyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI21hcC5lbnRyaWVzKClcbiAgICB9XG4gICAgZm9yRWFjaCA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICBjb25zdCBhcnIgPSBBcnJheS5mcm9tKHRoaXMuI21hcC52YWx1ZXMoKSlcbiAgICAgICAgZm9yKGNvbnN0IGkgaW4gYXJyKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhhcnJbaV0sIGksIGFycilcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgPSAodmFsdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI21hcC5nZXQodGhpcy4ja2V5KHZhbHVlKSlcbiAgICB9XG4gICAgaGFzID0gKHZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLiNtYXAuaGFzKHRoaXMuI2tleSh2YWx1ZSkpXG4gICAgfVxuICAgIGtleXMgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLiNtYXAua2V5cygpXG4gICAgfVxuICAgIHZhbHVlcyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI21hcC52YWx1ZXMoKVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBLZXllZFNldCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNQSxRQUFRLENBQUM7RUFDWCxDQUFDQyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUM7RUFDZixDQUFDQyxHQUFHLEdBQUcsSUFBSUMsR0FBRyxFQUFFO0VBRWhCQyxXQUFXLENBQUNDLE9BQU8sRUFBRTtJQUNqQixJQUFJLENBQUMsQ0FBQ0osR0FBRyxHQUFHSSxPQUFPO0lBQ25CLE9BQU8sSUFBSUMsS0FBSyxDQUFDLElBQUksRUFBRTtNQUNuQkMsR0FBRyxDQUFDQyxNQUFNLEVBQUVDLElBQUksRUFBRTtRQUNkLElBQUdBLElBQUksSUFBSUQsTUFBTSxFQUFFO1VBQ2YsT0FBT0EsTUFBTSxDQUFDQyxJQUFJLENBQUM7UUFDdkIsQ0FBQyxNQUNJLElBQUdDLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDLEtBQUtFLEdBQUcsRUFBRTtVQUMxQixNQUFNQyxHQUFHLEdBQUcsQ0FBQyxHQUFHSixNQUFNLENBQUM7VUFDdkIsTUFBTUssS0FBSyxHQUFHSCxNQUFNLENBQUNELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBR0csR0FBRyxDQUFDRSxNQUFNLEdBQUdMLElBQUksR0FBR0EsSUFBSTtVQUN6RCxPQUFPRyxHQUFHLENBQUNDLEtBQUssQ0FBQztRQUNyQjtNQUNKO0lBQ0osQ0FBQyxDQUFDO0VBQ047RUFFQSxDQUFDRSxNQUFNLENBQUNDLFFBQVEsSUFBSSxNQUFNO0lBQ3RCLE9BQU8sSUFBSSxDQUFDLENBQUNkLEdBQUcsQ0FBQ2UsTUFBTSxFQUFFO0VBQzdCLENBQUM7RUFFRCxJQUFJSCxNQUFNLEdBQUc7SUFDVCxPQUFPSSxLQUFLLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQ2pCLEdBQUcsQ0FBQ2UsTUFBTSxFQUFFLENBQUMsQ0FBQ0gsTUFBTTtFQUNoRDtFQUVBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHSCxNQUFNLEtBQUs7SUFDakJBLE1BQU0sQ0FBQ0ksSUFBSSxFQUFFLENBQUNDLE9BQU8sQ0FBQ0MsS0FBSyxJQUFJO01BQzNCLElBQUksQ0FBQyxDQUFDckIsR0FBRyxDQUFDc0IsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDdkIsR0FBRyxDQUFDc0IsS0FBSyxDQUFDLEVBQUVBLEtBQUssQ0FBQztJQUMxQyxDQUFDLENBQUM7RUFDTixDQUFDO0VBQ0RFLEtBQUssR0FBRyxNQUFNO0lBQ1YsSUFBSSxDQUFDLENBQUN2QixHQUFHLENBQUN1QixLQUFLLEVBQUU7RUFDckIsQ0FBQztFQUNEQyxNQUFNLEdBQUlILEtBQUssSUFBSztJQUNoQixPQUFPLElBQUksQ0FBQyxDQUFDckIsR0FBRyxDQUFDd0IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDekIsR0FBRyxDQUFDc0IsS0FBSyxDQUFDLENBQUM7RUFDN0MsQ0FBQztFQUNESSxPQUFPLEdBQUcsTUFBTTtJQUNaLE9BQU8sSUFBSSxDQUFDLENBQUN6QixHQUFHLENBQUN5QixPQUFPLEVBQUU7RUFDOUIsQ0FBQztFQUNETCxPQUFPLEdBQUlNLFFBQVEsSUFBSztJQUNwQixNQUFNaEIsR0FBRyxHQUFHTSxLQUFLLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQ2pCLEdBQUcsQ0FBQ2UsTUFBTSxFQUFFLENBQUM7SUFDMUMsS0FBSSxNQUFNWSxDQUFDLElBQUlqQixHQUFHLEVBQUU7TUFDaEJnQixRQUFRLENBQUNoQixHQUFHLENBQUNpQixDQUFDLENBQUMsRUFBRUEsQ0FBQyxFQUFFakIsR0FBRyxDQUFDO0lBQzVCO0VBQ0osQ0FBQztFQUNETCxHQUFHLEdBQUlnQixLQUFLLElBQUs7SUFDYixPQUFPLElBQUksQ0FBQyxDQUFDckIsR0FBRyxDQUFDSyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUNOLEdBQUcsQ0FBQ3NCLEtBQUssQ0FBQyxDQUFDO0VBQzFDLENBQUM7RUFDRE8sR0FBRyxHQUFJUCxLQUFLLElBQUs7SUFDYixPQUFPLElBQUksQ0FBQyxDQUFDckIsR0FBRyxDQUFDNEIsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDN0IsR0FBRyxDQUFDc0IsS0FBSyxDQUFDLENBQUM7RUFDMUMsQ0FBQztFQUNEUSxJQUFJLEdBQUcsTUFBTTtJQUNULE9BQU8sSUFBSSxDQUFDLENBQUM3QixHQUFHLENBQUM2QixJQUFJLEVBQUU7RUFDM0IsQ0FBQztFQUNEZCxNQUFNLEdBQUcsTUFBTTtJQUNYLE9BQU8sSUFBSSxDQUFDLENBQUNmLEdBQUcsQ0FBQ2UsTUFBTSxFQUFFO0VBQzdCLENBQUM7QUFDTDtBQUVBZSxNQUFNLENBQUNDLE9BQU8sR0FBR2pDLFFBQVEifQ==