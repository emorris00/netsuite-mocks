var _dec, _dec2, _init_format, _dec3, _dec4, _init_resolveDomain, _dec5, _dec6, _init_resolveRecord, _dec7, _dec8, _init_resolveScript, _dec9, _dec10, _init_resolveTaskLink;
function createAddInitializerMethod(initializers, decoratorFinishedRef) { return function (initializer) { assertNotFinished(decoratorFinishedRef, "addInitializer"), assertCallable(initializer, "An initializer"), initializers.push(initializer); }; }
function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, value) { var kindStr; switch (kind) { case 1: kindStr = "accessor"; break; case 2: kindStr = "method"; break; case 3: kindStr = "getter"; break; case 4: kindStr = "setter"; break; default: kindStr = "field"; } var get, set, ctx = { kind: kindStr, name: isPrivate ? "#" + name : name, static: isStatic, private: isPrivate }, decoratorFinishedRef = { v: !1 }; 0 !== kind && (ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef)), 0 === kind ? isPrivate ? (get = desc.get, set = desc.set) : (get = function () { return this[name]; }, set = function (v) { this[name] = v; }) : 2 === kind ? get = function () { return desc.value; } : (1 !== kind && 3 !== kind || (get = function () { return desc.get.call(this); }), 1 !== kind && 4 !== kind || (set = function (v) { desc.set.call(this, v); })), ctx.access = get && set ? { get: get, set: set } : get ? { get: get } : { set: set }; try { return dec(value, ctx); } finally { decoratorFinishedRef.v = !0; } }
function assertNotFinished(decoratorFinishedRef, fnName) { if (decoratorFinishedRef.v) throw new Error("attempted to call " + fnName + " after decoration was finished"); }
function assertCallable(fn, hint) { if ("function" != typeof fn) throw new TypeError(hint + " must be a function"); }
function assertValidReturnValue(kind, value) { var type = typeof value; if (1 === kind) { if ("object" !== type || null === value) throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0"); void 0 !== value.get && assertCallable(value.get, "accessor.get"), void 0 !== value.set && assertCallable(value.set, "accessor.set"), void 0 !== value.init && assertCallable(value.init, "accessor.init"); } else if ("function" !== type) { var hint; throw hint = 0 === kind ? "field" : 10 === kind ? "class" : "method", new TypeError(hint + " decorators must return a function or void 0"); } }
function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers) { var desc, init, value, newValue, get, set, decs = decInfo[0]; if (isPrivate ? desc = 0 === kind || 1 === kind ? { get: decInfo[3], set: decInfo[4] } : 3 === kind ? { get: decInfo[3] } : 4 === kind ? { set: decInfo[3] } : { value: decInfo[3] } : 0 !== kind && (desc = Object.getOwnPropertyDescriptor(base, name)), 1 === kind ? value = { get: desc.get, set: desc.set } : 2 === kind ? value = desc.value : 3 === kind ? value = desc.get : 4 === kind && (value = desc.set), "function" == typeof decs) void 0 !== (newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, value)) && (assertValidReturnValue(kind, newValue), 0 === kind ? init = newValue : 1 === kind ? (init = newValue.init, get = newValue.get || value.get, set = newValue.set || value.set, value = { get: get, set: set }) : value = newValue);else for (var i = decs.length - 1; i >= 0; i--) { var newInit; if (void 0 !== (newValue = memberDec(decs[i], name, desc, initializers, kind, isStatic, isPrivate, value))) assertValidReturnValue(kind, newValue), 0 === kind ? newInit = newValue : 1 === kind ? (newInit = newValue.init, get = newValue.get || value.get, set = newValue.set || value.set, value = { get: get, set: set }) : value = newValue, void 0 !== newInit && (void 0 === init ? init = newInit : "function" == typeof init ? init = [init, newInit] : init.push(newInit)); } if (0 === kind || 1 === kind) { if (void 0 === init) init = function (instance, init) { return init; };else if ("function" != typeof init) { var ownInitializers = init; init = function (instance, init) { for (var value = init, i = 0; i < ownInitializers.length; i++) value = ownInitializers[i].call(instance, value); return value; }; } else { var originalInitializer = init; init = function (instance, init) { return originalInitializer.call(instance, init); }; } ret.push(init); } 0 !== kind && (1 === kind ? (desc.get = value.get, desc.set = value.set) : 2 === kind ? desc.value = value : 3 === kind ? desc.get = value : 4 === kind && (desc.set = value), isPrivate ? 1 === kind ? (ret.push(function (instance, args) { return value.get.call(instance, args); }), ret.push(function (instance, args) { return value.set.call(instance, args); })) : 2 === kind ? ret.push(value) : ret.push(function (instance, args) { return value.call(instance, args); }) : Object.defineProperty(base, name, desc)); }
function applyMemberDecs(ret, Class, decInfos) { for (var protoInitializers, staticInitializers, existingProtoNonFields = new Map(), existingStaticNonFields = new Map(), i = 0; i < decInfos.length; i++) { var decInfo = decInfos[i]; if (Array.isArray(decInfo)) { var base, initializers, kind = decInfo[1], name = decInfo[2], isPrivate = decInfo.length > 3, isStatic = kind >= 5; if (isStatic ? (base = Class, 0 !== (kind -= 5) && (initializers = staticInitializers = staticInitializers || [])) : (base = Class.prototype, 0 !== kind && (initializers = protoInitializers = protoInitializers || [])), 0 !== kind && !isPrivate) { var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields, existingKind = existingNonFields.get(name) || 0; if (!0 === existingKind || 3 === existingKind && 4 !== kind || 4 === existingKind && 3 !== kind) throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + name); !existingKind && kind > 2 ? existingNonFields.set(name, kind) : existingNonFields.set(name, !0); } applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers); } } pushInitializers(ret, protoInitializers), pushInitializers(ret, staticInitializers); }
function pushInitializers(ret, initializers) { initializers && ret.push(function (instance) { for (var i = 0; i < initializers.length; i++) initializers[i].call(instance); return instance; }); }
function applyClassDecs(ret, targetClass, classDecs) { if (classDecs.length > 0) { for (var initializers = [], newClass = targetClass, name = targetClass.name, i = classDecs.length - 1; i >= 0; i--) { var decoratorFinishedRef = { v: !1 }; try { var nextNewClass = classDecs[i](newClass, { kind: "class", name: name, addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef) }); } finally { decoratorFinishedRef.v = !0; } void 0 !== nextNewClass && (assertValidReturnValue(10, nextNewClass), newClass = nextNewClass); } ret.push(newClass, function () { for (var i = 0; i < initializers.length; i++) initializers[i].call(newClass); }); } }
function _applyDecs(targetClass, memberDecs, classDecs) { var ret = []; return applyMemberDecs(ret, targetClass, memberDecs), applyClassDecs(ret, targetClass, classDecs), ret; }
const urlStub = require("suitecloud-unit-testing-stubs/stubs/url");
const {
  options,
  required
} = require("../../helpers.cjs");
_dec = options("domain", "params");
_dec2 = required("domain", "params");
_dec3 = options("hostType", "accountId");
_dec4 = required("hostType");
_dec5 = options("isEditMode", "recordId", "recordType", "params");
_dec6 = required("isEditMode", "recordId", "recordType");
_dec7 = options("deploymentId", "scriptId", "params", "returnExternalUrl");
_dec8 = required("deploymentId", "scriptId");
_dec9 = options("id", "params");
_dec10 = required("id");
class Url {
  static {
    [_init_format, _init_resolveDomain, _init_resolveRecord, _init_resolveScript, _init_resolveTaskLink] = _applyDecs(this, [[[_dec, _dec2], 0, "format"], [[_dec3, _dec4], 0, "resolveDomain"], [[_dec5, _dec6], 0, "resolveRecord"], [[_dec7, _dec8], 0, "resolveScript"], [[_dec9, _dec10], 0, "resolveTaskLink"]], []);
  }
  HostType = urlStub.HostType;
  format = _init_format(this, options => {
    return options.domain + "?" + new URLSearchParams(options.params);
  });
  resolveDomain = _init_resolveDomain(this, () => {});
  resolveRecord = _init_resolveRecord(this, () => {});
  resolveScript = _init_resolveScript(this, () => {});
  resolveTaskLink = _init_resolveTaskLink(this, () => {});
}
module.exports = new Url();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1cmxTdHViIiwicmVxdWlyZSIsIm9wdGlvbnMiLCJyZXF1aXJlZCIsIlVybCIsIkhvc3RUeXBlIiwiZm9ybWF0IiwiZG9tYWluIiwiVVJMU2VhcmNoUGFyYW1zIiwicGFyYW1zIiwicmVzb2x2ZURvbWFpbiIsInJlc29sdmVSZWNvcmQiLCJyZXNvbHZlU2NyaXB0IiwicmVzb2x2ZVRhc2tMaW5rIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2Nrcy91cmwvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHVybFN0dWIgPSByZXF1aXJlKFwic3VpdGVjbG91ZC11bml0LXRlc3Rpbmctc3R1YnMvc3R1YnMvdXJsXCIpO1xuY29uc3QgeyBvcHRpb25zLCByZXF1aXJlZCB9ID0gcmVxdWlyZShcIi4uLy4uL2hlbHBlcnMuY2pzXCIpO1xuXG5jbGFzcyBVcmwge1xuXHRIb3N0VHlwZSA9IHVybFN0dWIuSG9zdFR5cGU7XG5cblx0QG9wdGlvbnMoXCJkb21haW5cIiwgXCJwYXJhbXNcIilcblx0QHJlcXVpcmVkKFwiZG9tYWluXCIsIFwicGFyYW1zXCIpXG5cdGZvcm1hdCA9IChvcHRpb25zKSA9PiB7XG5cdFx0cmV0dXJuIG9wdGlvbnMuZG9tYWluICsgXCI/XCIgKyBuZXcgVVJMU2VhcmNoUGFyYW1zKG9wdGlvbnMucGFyYW1zKTtcblx0fTtcblxuXHRAb3B0aW9ucyhcImhvc3RUeXBlXCIsIFwiYWNjb3VudElkXCIpXG5cdEByZXF1aXJlZChcImhvc3RUeXBlXCIpXG5cdHJlc29sdmVEb21haW4gPSAoKSA9PiB7fTtcblxuXHRAb3B0aW9ucyhcImlzRWRpdE1vZGVcIiwgXCJyZWNvcmRJZFwiLCBcInJlY29yZFR5cGVcIiwgXCJwYXJhbXNcIilcblx0QHJlcXVpcmVkKFwiaXNFZGl0TW9kZVwiLCBcInJlY29yZElkXCIsIFwicmVjb3JkVHlwZVwiKVxuXHRyZXNvbHZlUmVjb3JkID0gKCkgPT4ge307XG5cblx0QG9wdGlvbnMoXCJkZXBsb3ltZW50SWRcIiwgXCJzY3JpcHRJZFwiLCBcInBhcmFtc1wiLCBcInJldHVybkV4dGVybmFsVXJsXCIpXG5cdEByZXF1aXJlZChcImRlcGxveW1lbnRJZFwiLCBcInNjcmlwdElkXCIpXG5cdHJlc29sdmVTY3JpcHQgPSAoKSA9PiB7fTtcblxuXHRAb3B0aW9ucyhcImlkXCIsIFwicGFyYW1zXCIpXG5cdEByZXF1aXJlZChcImlkXCIpXG5cdHJlc29sdmVUYXNrTGluayA9ICgpID0+IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBVcmwoKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyx5Q0FBeUMsQ0FBQztBQUNsRSxNQUFNO0VBQUVDLE9BQU87RUFBRUM7QUFBUyxDQUFDLEdBQUdGLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztBQUFDLE9BS3pEQyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztBQUFBLFFBQzNCQyxRQUFRLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztBQUFBLFFBSzVCRCxPQUFPLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQztBQUFBLFFBQ2hDQyxRQUFRLENBQUMsVUFBVSxDQUFDO0FBQUEsUUFHcEJELE9BQU8sQ0FBQyxZQUFZLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUM7QUFBQSxRQUN6REMsUUFBUSxDQUFDLFlBQVksRUFBRSxVQUFVLEVBQUUsWUFBWSxDQUFDO0FBQUEsUUFHaERELE9BQU8sQ0FBQyxjQUFjLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQztBQUFBLFFBQ2xFQyxRQUFRLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQztBQUFBLFFBR3BDRCxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztBQUFBLFNBQ3ZCQyxRQUFRLENBQUMsSUFBSSxDQUFDO0FBdEJoQixNQUFNQyxHQUFHLENBQUM7RUFBQTtJQUFBO0VBQUE7RUFDVEMsUUFBUSxHQUFHTCxPQUFPLENBQUNLLFFBQVE7RUFJM0JDLE1BQU0sc0JBQUlKLE9BQU8sSUFBSztJQUNyQixPQUFPQSxPQUFPLENBQUNLLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSUMsZUFBZSxDQUFDTixPQUFPLENBQUNPLE1BQU0sQ0FBQztFQUNsRSxDQUFDO0VBSURDLGFBQWEsNkJBQUcsTUFBTSxDQUFDLENBQUM7RUFJeEJDLGFBQWEsNkJBQUcsTUFBTSxDQUFDLENBQUM7RUFJeEJDLGFBQWEsNkJBQUcsTUFBTSxDQUFDLENBQUM7RUFJeEJDLGVBQWUsK0JBQUcsTUFBTSxDQUFDLENBQUM7QUFDM0I7QUFFQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsSUFBSVgsR0FBRyxFQUFFIn0=