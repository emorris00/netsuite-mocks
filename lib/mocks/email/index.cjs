var _dec, _dec2, _dec3, _init_send, _dec4, _dec5, _dec6, _init_sendBulk, _dec7, _dec8, _dec9, _init_sendCampaignEvent;
function createAddInitializerMethod(initializers, decoratorFinishedRef) { return function (initializer) { assertNotFinished(decoratorFinishedRef, "addInitializer"), assertCallable(initializer, "An initializer"), initializers.push(initializer); }; }
function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, value) { var kindStr; switch (kind) { case 1: kindStr = "accessor"; break; case 2: kindStr = "method"; break; case 3: kindStr = "getter"; break; case 4: kindStr = "setter"; break; default: kindStr = "field"; } var get, set, ctx = { kind: kindStr, name: isPrivate ? "#" + name : name, static: isStatic, private: isPrivate }, decoratorFinishedRef = { v: !1 }; 0 !== kind && (ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef)), 0 === kind ? isPrivate ? (get = desc.get, set = desc.set) : (get = function () { return this[name]; }, set = function (v) { this[name] = v; }) : 2 === kind ? get = function () { return desc.value; } : (1 !== kind && 3 !== kind || (get = function () { return desc.get.call(this); }), 1 !== kind && 4 !== kind || (set = function (v) { desc.set.call(this, v); })), ctx.access = get && set ? { get: get, set: set } : get ? { get: get } : { set: set }; try { return dec(value, ctx); } finally { decoratorFinishedRef.v = !0; } }
function assertNotFinished(decoratorFinishedRef, fnName) { if (decoratorFinishedRef.v) throw new Error("attempted to call " + fnName + " after decoration was finished"); }
function assertCallable(fn, hint) { if ("function" != typeof fn) throw new TypeError(hint + " must be a function"); }
function assertValidReturnValue(kind, value) { var type = typeof value; if (1 === kind) { if ("object" !== type || null === value) throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0"); void 0 !== value.get && assertCallable(value.get, "accessor.get"), void 0 !== value.set && assertCallable(value.set, "accessor.set"), void 0 !== value.init && assertCallable(value.init, "accessor.init"); } else if ("function" !== type) { var hint; throw hint = 0 === kind ? "field" : 10 === kind ? "class" : "method", new TypeError(hint + " decorators must return a function or void 0"); } }
function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers) { var desc, init, value, newValue, get, set, decs = decInfo[0]; if (isPrivate ? desc = 0 === kind || 1 === kind ? { get: decInfo[3], set: decInfo[4] } : 3 === kind ? { get: decInfo[3] } : 4 === kind ? { set: decInfo[3] } : { value: decInfo[3] } : 0 !== kind && (desc = Object.getOwnPropertyDescriptor(base, name)), 1 === kind ? value = { get: desc.get, set: desc.set } : 2 === kind ? value = desc.value : 3 === kind ? value = desc.get : 4 === kind && (value = desc.set), "function" == typeof decs) void 0 !== (newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, value)) && (assertValidReturnValue(kind, newValue), 0 === kind ? init = newValue : 1 === kind ? (init = newValue.init, get = newValue.get || value.get, set = newValue.set || value.set, value = { get: get, set: set }) : value = newValue);else for (var i = decs.length - 1; i >= 0; i--) { var newInit; if (void 0 !== (newValue = memberDec(decs[i], name, desc, initializers, kind, isStatic, isPrivate, value))) assertValidReturnValue(kind, newValue), 0 === kind ? newInit = newValue : 1 === kind ? (newInit = newValue.init, get = newValue.get || value.get, set = newValue.set || value.set, value = { get: get, set: set }) : value = newValue, void 0 !== newInit && (void 0 === init ? init = newInit : "function" == typeof init ? init = [init, newInit] : init.push(newInit)); } if (0 === kind || 1 === kind) { if (void 0 === init) init = function (instance, init) { return init; };else if ("function" != typeof init) { var ownInitializers = init; init = function (instance, init) { for (var value = init, i = 0; i < ownInitializers.length; i++) value = ownInitializers[i].call(instance, value); return value; }; } else { var originalInitializer = init; init = function (instance, init) { return originalInitializer.call(instance, init); }; } ret.push(init); } 0 !== kind && (1 === kind ? (desc.get = value.get, desc.set = value.set) : 2 === kind ? desc.value = value : 3 === kind ? desc.get = value : 4 === kind && (desc.set = value), isPrivate ? 1 === kind ? (ret.push(function (instance, args) { return value.get.call(instance, args); }), ret.push(function (instance, args) { return value.set.call(instance, args); })) : 2 === kind ? ret.push(value) : ret.push(function (instance, args) { return value.call(instance, args); }) : Object.defineProperty(base, name, desc)); }
function applyMemberDecs(ret, Class, decInfos) { for (var protoInitializers, staticInitializers, existingProtoNonFields = new Map(), existingStaticNonFields = new Map(), i = 0; i < decInfos.length; i++) { var decInfo = decInfos[i]; if (Array.isArray(decInfo)) { var base, initializers, kind = decInfo[1], name = decInfo[2], isPrivate = decInfo.length > 3, isStatic = kind >= 5; if (isStatic ? (base = Class, 0 !== (kind -= 5) && (initializers = staticInitializers = staticInitializers || [])) : (base = Class.prototype, 0 !== kind && (initializers = protoInitializers = protoInitializers || [])), 0 !== kind && !isPrivate) { var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields, existingKind = existingNonFields.get(name) || 0; if (!0 === existingKind || 3 === existingKind && 4 !== kind || 4 === existingKind && 3 !== kind) throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + name); !existingKind && kind > 2 ? existingNonFields.set(name, kind) : existingNonFields.set(name, !0); } applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers); } } pushInitializers(ret, protoInitializers), pushInitializers(ret, staticInitializers); }
function pushInitializers(ret, initializers) { initializers && ret.push(function (instance) { for (var i = 0; i < initializers.length; i++) initializers[i].call(instance); return instance; }); }
function applyClassDecs(ret, targetClass, classDecs) { if (classDecs.length > 0) { for (var initializers = [], newClass = targetClass, name = targetClass.name, i = classDecs.length - 1; i >= 0; i--) { var decoratorFinishedRef = { v: !1 }; try { var nextNewClass = classDecs[i](newClass, { kind: "class", name: name, addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef) }); } finally { decoratorFinishedRef.v = !0; } void 0 !== nextNewClass && (assertValidReturnValue(10, nextNewClass), newClass = nextNewClass); } ret.push(newClass, function () { for (var i = 0; i < initializers.length; i++) initializers[i].call(newClass); }); } }
function _applyDecs(targetClass, memberDecs, classDecs) { var ret = []; return applyMemberDecs(ret, targetClass, memberDecs), applyClassDecs(ret, targetClass, classDecs), ret; }
const {
  default: SuiteScriptMocks
} = require("../../..");
const {
  addPromise,
  options,
  required
} = require("../../helpers.cjs");
_dec = options("author", "body", "recipients", "subject", "attachments", "bcc", "cc", "isInternalOnly", "relatedRecords", "replyTo");
_dec2 = required("author", "body", "recipients", "subject");
_dec3 = addPromise();
_dec4 = options("author", "body", "recipients", "subject", "attachments", "bcc", "cc", "isInternalOnly", "relatedRecords", "replyTo");
_dec5 = required("author", "body", "recipients", "subject");
_dec6 = addPromise();
_dec7 = options("campaignEventId", "receipientId");
_dec8 = required("campaignEventId", "receipientId");
_dec9 = addPromise();
class EmailModule {
  static {
    [_init_send, _init_sendBulk, _init_sendCampaignEvent] = _applyDecs(this, [[[_dec, _dec2, _dec3], 0, "send"], [[_dec4, _dec5, _dec6], 0, "sendBulk"], [[_dec7, _dec8, _dec9], 0, "sendCampaignEvent"]], []);
  }
  send = _init_send(this, options => {
    SuiteScriptMocks.sentEmails.push(options);
  });
  sendBulk = _init_sendBulk(this, options => {
    SuiteScriptMocks.sentEmails.push(options);
  });
  sendCampaignEvent = _init_sendCampaignEvent(this, options => {});
}
module.exports = new EmailModule();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWZhdWx0IiwiU3VpdGVTY3JpcHRNb2NrcyIsInJlcXVpcmUiLCJhZGRQcm9taXNlIiwib3B0aW9ucyIsInJlcXVpcmVkIiwiRW1haWxNb2R1bGUiLCJzZW5kIiwic2VudEVtYWlscyIsInB1c2giLCJzZW5kQnVsayIsInNlbmRDYW1wYWlnbkV2ZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2Nrcy9lbWFpbC9pbmRleC5janMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBkZWZhdWx0OiBTdWl0ZVNjcmlwdE1vY2tzIH0gPSByZXF1aXJlKFwiLi4vLi4vLi5cIik7XG5jb25zdCB7IGFkZFByb21pc2UsIG9wdGlvbnMsIHJlcXVpcmVkIH0gPSByZXF1aXJlKFwiLi4vLi4vaGVscGVycy5janNcIik7XG5cbmNsYXNzIEVtYWlsTW9kdWxlIHtcblx0QG9wdGlvbnMoXG5cdFx0XCJhdXRob3JcIixcblx0XHRcImJvZHlcIixcblx0XHRcInJlY2lwaWVudHNcIixcblx0XHRcInN1YmplY3RcIixcblx0XHRcImF0dGFjaG1lbnRzXCIsXG5cdFx0XCJiY2NcIixcblx0XHRcImNjXCIsXG5cdFx0XCJpc0ludGVybmFsT25seVwiLFxuXHRcdFwicmVsYXRlZFJlY29yZHNcIixcblx0XHRcInJlcGx5VG9cIlxuXHQpXG5cdEByZXF1aXJlZChcImF1dGhvclwiLCBcImJvZHlcIiwgXCJyZWNpcGllbnRzXCIsIFwic3ViamVjdFwiKVxuXHRAYWRkUHJvbWlzZSgpXG5cdHNlbmQgPSAob3B0aW9ucykgPT4ge1xuXHRcdFN1aXRlU2NyaXB0TW9ja3Muc2VudEVtYWlscy5wdXNoKG9wdGlvbnMpO1xuXHR9O1xuXG5cdEBvcHRpb25zKFxuXHRcdFwiYXV0aG9yXCIsXG5cdFx0XCJib2R5XCIsXG5cdFx0XCJyZWNpcGllbnRzXCIsXG5cdFx0XCJzdWJqZWN0XCIsXG5cdFx0XCJhdHRhY2htZW50c1wiLFxuXHRcdFwiYmNjXCIsXG5cdFx0XCJjY1wiLFxuXHRcdFwiaXNJbnRlcm5hbE9ubHlcIixcblx0XHRcInJlbGF0ZWRSZWNvcmRzXCIsXG5cdFx0XCJyZXBseVRvXCJcblx0KVxuXHRAcmVxdWlyZWQoXCJhdXRob3JcIiwgXCJib2R5XCIsIFwicmVjaXBpZW50c1wiLCBcInN1YmplY3RcIilcblx0QGFkZFByb21pc2UoKVxuXHRzZW5kQnVsayA9IChvcHRpb25zKSA9PiB7XG5cdFx0U3VpdGVTY3JpcHRNb2Nrcy5zZW50RW1haWxzLnB1c2gob3B0aW9ucyk7XG5cdH07XG5cblx0QG9wdGlvbnMoXCJjYW1wYWlnbkV2ZW50SWRcIiwgXCJyZWNlaXBpZW50SWRcIilcblx0QHJlcXVpcmVkKFwiY2FtcGFpZ25FdmVudElkXCIsIFwicmVjZWlwaWVudElkXCIpXG5cdEBhZGRQcm9taXNlKClcblx0c2VuZENhbXBhaWduRXZlbnQgPSAob3B0aW9ucykgPT4ge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IEVtYWlsTW9kdWxlKCk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsTUFBTTtFQUFFQSxPQUFPLEVBQUVDO0FBQWlCLENBQUMsR0FBR0MsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUN6RCxNQUFNO0VBQUVDLFVBQVU7RUFBRUMsT0FBTztFQUFFQztBQUFTLENBQUMsR0FBR0gsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQUMsT0FHckVFLE9BQU8sQ0FDUCxRQUFRLEVBQ1IsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBQ1QsYUFBYSxFQUNiLEtBQUssRUFDTCxJQUFJLEVBQ0osZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixTQUFTLENBQ1Q7QUFBQSxRQUNBQyxRQUFRLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxDQUFDO0FBQUEsUUFDbkRGLFVBQVUsRUFBRTtBQUFBLFFBS1pDLE9BQU8sQ0FDUCxRQUFRLEVBQ1IsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBQ1QsYUFBYSxFQUNiLEtBQUssRUFDTCxJQUFJLEVBQ0osZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixTQUFTLENBQ1Q7QUFBQSxRQUNBQyxRQUFRLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxDQUFDO0FBQUEsUUFDbkRGLFVBQVUsRUFBRTtBQUFBLFFBS1pDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLENBQUM7QUFBQSxRQUMxQ0MsUUFBUSxDQUFDLGlCQUFpQixFQUFFLGNBQWMsQ0FBQztBQUFBLFFBQzNDRixVQUFVLEVBQUU7QUF2Q2QsTUFBTUcsV0FBVyxDQUFDO0VBQUE7SUFBQTtFQUFBO0VBZWpCQyxJQUFJLG9CQUFJSCxPQUFPLElBQUs7SUFDbkJILGdCQUFnQixDQUFDTyxVQUFVLENBQUNDLElBQUksQ0FBQ0wsT0FBTyxDQUFDO0VBQzFDLENBQUM7RUFnQkRNLFFBQVEsd0JBQUlOLE9BQU8sSUFBSztJQUN2QkgsZ0JBQWdCLENBQUNPLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDTCxPQUFPLENBQUM7RUFDMUMsQ0FBQztFQUtETyxpQkFBaUIsaUNBQUlQLE9BQU8sSUFBSyxDQUFDLENBQUM7QUFDcEM7QUFFQVEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsSUFBSVAsV0FBVyxFQUFFIn0=