var _dec, _dec2, _init_fetch;
function createAddInitializerMethod(initializers, decoratorFinishedRef) { return function (initializer) { assertNotFinished(decoratorFinishedRef, "addInitializer"), assertCallable(initializer, "An initializer"), initializers.push(initializer); }; }
function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, value) { var kindStr; switch (kind) { case 1: kindStr = "accessor"; break; case 2: kindStr = "method"; break; case 3: kindStr = "getter"; break; case 4: kindStr = "setter"; break; default: kindStr = "field"; } var get, set, ctx = { kind: kindStr, name: isPrivate ? "#" + name : name, static: isStatic, private: isPrivate }, decoratorFinishedRef = { v: !1 }; 0 !== kind && (ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef)), 0 === kind ? isPrivate ? (get = desc.get, set = desc.set) : (get = function () { return this[name]; }, set = function (v) { this[name] = v; }) : 2 === kind ? get = function () { return desc.value; } : (1 !== kind && 3 !== kind || (get = function () { return desc.get.call(this); }), 1 !== kind && 4 !== kind || (set = function (v) { desc.set.call(this, v); })), ctx.access = get && set ? { get: get, set: set } : get ? { get: get } : { set: set }; try { return dec(value, ctx); } finally { decoratorFinishedRef.v = !0; } }
function assertNotFinished(decoratorFinishedRef, fnName) { if (decoratorFinishedRef.v) throw new Error("attempted to call " + fnName + " after decoration was finished"); }
function assertCallable(fn, hint) { if ("function" != typeof fn) throw new TypeError(hint + " must be a function"); }
function assertValidReturnValue(kind, value) { var type = typeof value; if (1 === kind) { if ("object" !== type || null === value) throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0"); void 0 !== value.get && assertCallable(value.get, "accessor.get"), void 0 !== value.set && assertCallable(value.set, "accessor.set"), void 0 !== value.init && assertCallable(value.init, "accessor.init"); } else if ("function" !== type) { var hint; throw hint = 0 === kind ? "field" : 10 === kind ? "class" : "method", new TypeError(hint + " decorators must return a function or void 0"); } }
function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers) { var desc, init, value, newValue, get, set, decs = decInfo[0]; if (isPrivate ? desc = 0 === kind || 1 === kind ? { get: decInfo[3], set: decInfo[4] } : 3 === kind ? { get: decInfo[3] } : 4 === kind ? { set: decInfo[3] } : { value: decInfo[3] } : 0 !== kind && (desc = Object.getOwnPropertyDescriptor(base, name)), 1 === kind ? value = { get: desc.get, set: desc.set } : 2 === kind ? value = desc.value : 3 === kind ? value = desc.get : 4 === kind && (value = desc.set), "function" == typeof decs) void 0 !== (newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, value)) && (assertValidReturnValue(kind, newValue), 0 === kind ? init = newValue : 1 === kind ? (init = newValue.init, get = newValue.get || value.get, set = newValue.set || value.set, value = { get: get, set: set }) : value = newValue);else for (var i = decs.length - 1; i >= 0; i--) { var newInit; if (void 0 !== (newValue = memberDec(decs[i], name, desc, initializers, kind, isStatic, isPrivate, value))) assertValidReturnValue(kind, newValue), 0 === kind ? newInit = newValue : 1 === kind ? (newInit = newValue.init, get = newValue.get || value.get, set = newValue.set || value.set, value = { get: get, set: set }) : value = newValue, void 0 !== newInit && (void 0 === init ? init = newInit : "function" == typeof init ? init = [init, newInit] : init.push(newInit)); } if (0 === kind || 1 === kind) { if (void 0 === init) init = function (instance, init) { return init; };else if ("function" != typeof init) { var ownInitializers = init; init = function (instance, init) { for (var value = init, i = 0; i < ownInitializers.length; i++) value = ownInitializers[i].call(instance, value); return value; }; } else { var originalInitializer = init; init = function (instance, init) { return originalInitializer.call(instance, init); }; } ret.push(init); } 0 !== kind && (1 === kind ? (desc.get = value.get, desc.set = value.set) : 2 === kind ? desc.value = value : 3 === kind ? desc.get = value : 4 === kind && (desc.set = value), isPrivate ? 1 === kind ? (ret.push(function (instance, args) { return value.get.call(instance, args); }), ret.push(function (instance, args) { return value.set.call(instance, args); })) : 2 === kind ? ret.push(value) : ret.push(function (instance, args) { return value.call(instance, args); }) : Object.defineProperty(base, name, desc)); }
function applyMemberDecs(ret, Class, decInfos) { for (var protoInitializers, staticInitializers, existingProtoNonFields = new Map(), existingStaticNonFields = new Map(), i = 0; i < decInfos.length; i++) { var decInfo = decInfos[i]; if (Array.isArray(decInfo)) { var base, initializers, kind = decInfo[1], name = decInfo[2], isPrivate = decInfo.length > 3, isStatic = kind >= 5; if (isStatic ? (base = Class, 0 !== (kind -= 5) && (initializers = staticInitializers = staticInitializers || [])) : (base = Class.prototype, 0 !== kind && (initializers = protoInitializers = protoInitializers || [])), 0 !== kind && !isPrivate) { var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields, existingKind = existingNonFields.get(name) || 0; if (!0 === existingKind || 3 === existingKind && 4 !== kind || 4 === existingKind && 3 !== kind) throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + name); !existingKind && kind > 2 ? existingNonFields.set(name, kind) : existingNonFields.set(name, !0); } applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers); } } pushInitializers(ret, protoInitializers), pushInitializers(ret, staticInitializers); }
function pushInitializers(ret, initializers) { initializers && ret.push(function (instance) { for (var i = 0; i < initializers.length; i++) initializers[i].call(instance); return instance; }); }
function applyClassDecs(ret, targetClass, classDecs) { if (classDecs.length > 0) { for (var initializers = [], newClass = targetClass, name = targetClass.name, i = classDecs.length - 1; i >= 0; i--) { var decoratorFinishedRef = { v: !1 }; try { var nextNewClass = classDecs[i](newClass, { kind: "class", name: name, addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef) }); } finally { decoratorFinishedRef.v = !0; } void 0 !== nextNewClass && (assertValidReturnValue(10, nextNewClass), newClass = nextNewClass); } ret.push(newClass, function () { for (var i = 0; i < initializers.length; i++) initializers[i].call(newClass); }); } }
function _applyDecs(targetClass, memberDecs, classDecs) { var ret = []; return applyMemberDecs(ret, targetClass, memberDecs), applyClassDecs(ret, targetClass, classDecs), ret; }
const {
  Page
} = require("suitecloud-unit-testing-stubs/stubs/search.js");
const {
  addPromise,
  options
} = require("../../helpers.cjs");
const PageRange = require("./PageRange.cjs");
_dec = addPromise();
_dec2 = options("index");
class PagedData {
  static {
    [_init_fetch] = _applyDecs(this, [[[_dec, _dec2], 0, "fetch"]], []);
  }
  results = [];
  count;
  pageRanges;
  pageSize;
  searchDefinition;
  constructor({
    results,
    pageSize
  }) {
    this.results = results;
    this.count = results.length;
    this.pageSize = pageSize;
    this.pageRanges = new Array(Math.ceil(this.count / pageSize)).map((_, index) => new PageRange({
      index
    }));
  }
  fetch = _init_fetch(this, options => {
    const index = +options.index;
    return new Page({
      data: this.results.slice(index * this.pageSize, index * this.pageSize + this.pageSize),
      isFirst: index === 0,
      isLast: index === this.pageRanges.length - 1,
      pagedData: this,
      pageRnage: new PageRange({
        index
      })
    });
  });
}
module.exports = PagedData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYWdlIiwicmVxdWlyZSIsImFkZFByb21pc2UiLCJvcHRpb25zIiwiUGFnZVJhbmdlIiwiUGFnZWREYXRhIiwicmVzdWx0cyIsImNvdW50IiwicGFnZVJhbmdlcyIsInBhZ2VTaXplIiwic2VhcmNoRGVmaW5pdGlvbiIsImNvbnN0cnVjdG9yIiwibGVuZ3RoIiwiQXJyYXkiLCJNYXRoIiwiY2VpbCIsIm1hcCIsIl8iLCJpbmRleCIsImZldGNoIiwiZGF0YSIsInNsaWNlIiwiaXNGaXJzdCIsImlzTGFzdCIsInBhZ2VkRGF0YSIsInBhZ2VSbmFnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9ja3Mvc2VhcmNoL1BhZ2VkRGF0YS5janMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBQYWdlIH0gPSByZXF1aXJlKFwic3VpdGVjbG91ZC11bml0LXRlc3Rpbmctc3R1YnMvc3R1YnMvc2VhcmNoLmpzXCIpXHJcbmNvbnN0IHsgYWRkUHJvbWlzZSwgb3B0aW9ucyB9ID0gcmVxdWlyZShcIi4uLy4uL2hlbHBlcnMuY2pzXCIpXHJcbmNvbnN0IFBhZ2VSYW5nZSA9IHJlcXVpcmUoXCIuL1BhZ2VSYW5nZS5janNcIilcclxuXHJcblxyXG5jbGFzcyBQYWdlZERhdGEge1xyXG4gICAgcmVzdWx0cyA9IFtdXHJcblxyXG4gICAgY291bnRcclxuICAgIHBhZ2VSYW5nZXNcclxuICAgIHBhZ2VTaXplXHJcbiAgICBzZWFyY2hEZWZpbml0aW9uXHJcblxyXG4gICAgY29uc3RydWN0b3Ioe3Jlc3VsdHMsIHBhZ2VTaXplfSkge1xyXG4gICAgICAgIHRoaXMucmVzdWx0cyA9IHJlc3VsdHNcclxuICAgICAgICB0aGlzLmNvdW50ID0gcmVzdWx0cy5sZW5ndGhcclxuICAgICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemVcclxuICAgICAgICB0aGlzLnBhZ2VSYW5nZXMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMuY291bnQgLyBwYWdlU2l6ZSkpLm1hcCgoXywgaW5kZXgpID0+IFxyXG4gICAgICAgICAgICBuZXcgUGFnZVJhbmdlKHtpbmRleH0pXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIEBhZGRQcm9taXNlKClcclxuICAgIEBvcHRpb25zKFwiaW5kZXhcIilcclxuICAgIGZldGNoID0gb3B0aW9ucyA9PiB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSArb3B0aW9ucy5pbmRleFxyXG4gICAgICAgIHJldHVybiBuZXcgUGFnZSh7XHJcbiAgICAgICAgICAgIGRhdGE6IHRoaXMucmVzdWx0cy5zbGljZShpbmRleCAqIHRoaXMucGFnZVNpemUsIChpbmRleCAqIHRoaXMucGFnZVNpemUpICsgdGhpcy5wYWdlU2l6ZSksXHJcbiAgICAgICAgICAgIGlzRmlyc3Q6IGluZGV4ID09PSAwLFxyXG4gICAgICAgICAgICBpc0xhc3Q6IGluZGV4ID09PSB0aGlzLnBhZ2VSYW5nZXMubGVuZ3RoIC0gMSxcclxuICAgICAgICAgICAgcGFnZWREYXRhOiB0aGlzLFxyXG4gICAgICAgICAgICBwYWdlUm5hZ2U6IG5ldyBQYWdlUmFuZ2Uoe2luZGV4fSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFBhZ2VkRGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNO0VBQUVBO0FBQUssQ0FBQyxHQUFHQyxPQUFPLENBQUMsK0NBQStDLENBQUM7QUFDekUsTUFBTTtFQUFFQyxVQUFVO0VBQUVDO0FBQVEsQ0FBQyxHQUFHRixPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDNUQsTUFBTUcsU0FBUyxHQUFHSCxPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFBQSxPQW9CdkNDLFVBQVUsRUFBRTtBQUFBLFFBQ1pDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFsQnJCLE1BQU1FLFNBQVMsQ0FBQztFQUFBO0lBQUE7RUFBQTtFQUNaQyxPQUFPLEdBQUcsRUFBRTtFQUVaQyxLQUFLO0VBQ0xDLFVBQVU7RUFDVkMsUUFBUTtFQUNSQyxnQkFBZ0I7RUFFaEJDLFdBQVcsQ0FBQztJQUFDTCxPQUFPO0lBQUVHO0VBQVEsQ0FBQyxFQUFFO0lBQzdCLElBQUksQ0FBQ0gsT0FBTyxHQUFHQSxPQUFPO0lBQ3RCLElBQUksQ0FBQ0MsS0FBSyxHQUFHRCxPQUFPLENBQUNNLE1BQU07SUFDM0IsSUFBSSxDQUFDSCxRQUFRLEdBQUdBLFFBQVE7SUFDeEIsSUFBSSxDQUFDRCxVQUFVLEdBQUcsSUFBSUssS0FBSyxDQUFDQyxJQUFJLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUNSLEtBQUssR0FBR0UsUUFBUSxDQUFDLENBQUMsQ0FBQ08sR0FBRyxDQUFDLENBQUNDLENBQUMsRUFBRUMsS0FBSyxLQUN2RSxJQUFJZCxTQUFTLENBQUM7TUFBQ2M7SUFBSyxDQUFDLENBQUMsQ0FDekI7RUFDTDtFQUlBQyxLQUFLLHFCQUFHaEIsT0FBTyxJQUFJO0lBQ2YsTUFBTWUsS0FBSyxHQUFHLENBQUNmLE9BQU8sQ0FBQ2UsS0FBSztJQUM1QixPQUFPLElBQUlsQixJQUFJLENBQUM7TUFDWm9CLElBQUksRUFBRSxJQUFJLENBQUNkLE9BQU8sQ0FBQ2UsS0FBSyxDQUFDSCxLQUFLLEdBQUcsSUFBSSxDQUFDVCxRQUFRLEVBQUdTLEtBQUssR0FBRyxJQUFJLENBQUNULFFBQVEsR0FBSSxJQUFJLENBQUNBLFFBQVEsQ0FBQztNQUN4RmEsT0FBTyxFQUFFSixLQUFLLEtBQUssQ0FBQztNQUNwQkssTUFBTSxFQUFFTCxLQUFLLEtBQUssSUFBSSxDQUFDVixVQUFVLENBQUNJLE1BQU0sR0FBRyxDQUFDO01BQzVDWSxTQUFTLEVBQUUsSUFBSTtNQUNmQyxTQUFTLEVBQUUsSUFBSXJCLFNBQVMsQ0FBQztRQUFDYztNQUFLLENBQUM7SUFDcEMsQ0FBQyxDQUFDO0VBQ04sQ0FBQztBQUNMO0FBRUFRLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHdEIsU0FBUyJ9