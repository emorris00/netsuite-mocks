var _dec, _dec2, _init_isFeatureInEffect;
function createAddInitializerMethod(initializers, decoratorFinishedRef) { return function (initializer) { assertNotFinished(decoratorFinishedRef, "addInitializer"), assertCallable(initializer, "An initializer"), initializers.push(initializer); }; }
function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, value) { var kindStr; switch (kind) { case 1: kindStr = "accessor"; break; case 2: kindStr = "method"; break; case 3: kindStr = "getter"; break; case 4: kindStr = "setter"; break; default: kindStr = "field"; } var get, set, ctx = { kind: kindStr, name: isPrivate ? "#" + name : name, static: isStatic, private: isPrivate }, decoratorFinishedRef = { v: !1 }; 0 !== kind && (ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef)), 0 === kind ? isPrivate ? (get = desc.get, set = desc.set) : (get = function () { return this[name]; }, set = function (v) { this[name] = v; }) : 2 === kind ? get = function () { return desc.value; } : (1 !== kind && 3 !== kind || (get = function () { return desc.get.call(this); }), 1 !== kind && 4 !== kind || (set = function (v) { desc.set.call(this, v); })), ctx.access = get && set ? { get: get, set: set } : get ? { get: get } : { set: set }; try { return dec(value, ctx); } finally { decoratorFinishedRef.v = !0; } }
function assertNotFinished(decoratorFinishedRef, fnName) { if (decoratorFinishedRef.v) throw new Error("attempted to call " + fnName + " after decoration was finished"); }
function assertCallable(fn, hint) { if ("function" != typeof fn) throw new TypeError(hint + " must be a function"); }
function assertValidReturnValue(kind, value) { var type = typeof value; if (1 === kind) { if ("object" !== type || null === value) throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0"); void 0 !== value.get && assertCallable(value.get, "accessor.get"), void 0 !== value.set && assertCallable(value.set, "accessor.set"), void 0 !== value.init && assertCallable(value.init, "accessor.init"); } else if ("function" !== type) { var hint; throw hint = 0 === kind ? "field" : 10 === kind ? "class" : "method", new TypeError(hint + " decorators must return a function or void 0"); } }
function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers) { var desc, init, value, newValue, get, set, decs = decInfo[0]; if (isPrivate ? desc = 0 === kind || 1 === kind ? { get: decInfo[3], set: decInfo[4] } : 3 === kind ? { get: decInfo[3] } : 4 === kind ? { set: decInfo[3] } : { value: decInfo[3] } : 0 !== kind && (desc = Object.getOwnPropertyDescriptor(base, name)), 1 === kind ? value = { get: desc.get, set: desc.set } : 2 === kind ? value = desc.value : 3 === kind ? value = desc.get : 4 === kind && (value = desc.set), "function" == typeof decs) void 0 !== (newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, value)) && (assertValidReturnValue(kind, newValue), 0 === kind ? init = newValue : 1 === kind ? (init = newValue.init, get = newValue.get || value.get, set = newValue.set || value.set, value = { get: get, set: set }) : value = newValue);else for (var i = decs.length - 1; i >= 0; i--) { var newInit; if (void 0 !== (newValue = memberDec(decs[i], name, desc, initializers, kind, isStatic, isPrivate, value))) assertValidReturnValue(kind, newValue), 0 === kind ? newInit = newValue : 1 === kind ? (newInit = newValue.init, get = newValue.get || value.get, set = newValue.set || value.set, value = { get: get, set: set }) : value = newValue, void 0 !== newInit && (void 0 === init ? init = newInit : "function" == typeof init ? init = [init, newInit] : init.push(newInit)); } if (0 === kind || 1 === kind) { if (void 0 === init) init = function (instance, init) { return init; };else if ("function" != typeof init) { var ownInitializers = init; init = function (instance, init) { for (var value = init, i = 0; i < ownInitializers.length; i++) value = ownInitializers[i].call(instance, value); return value; }; } else { var originalInitializer = init; init = function (instance, init) { return originalInitializer.call(instance, init); }; } ret.push(init); } 0 !== kind && (1 === kind ? (desc.get = value.get, desc.set = value.set) : 2 === kind ? desc.value = value : 3 === kind ? desc.get = value : 4 === kind && (desc.set = value), isPrivate ? 1 === kind ? (ret.push(function (instance, args) { return value.get.call(instance, args); }), ret.push(function (instance, args) { return value.set.call(instance, args); })) : 2 === kind ? ret.push(value) : ret.push(function (instance, args) { return value.call(instance, args); }) : Object.defineProperty(base, name, desc)); }
function applyMemberDecs(ret, Class, decInfos) { for (var protoInitializers, staticInitializers, existingProtoNonFields = new Map(), existingStaticNonFields = new Map(), i = 0; i < decInfos.length; i++) { var decInfo = decInfos[i]; if (Array.isArray(decInfo)) { var base, initializers, kind = decInfo[1], name = decInfo[2], isPrivate = decInfo.length > 3, isStatic = kind >= 5; if (isStatic ? (base = Class, 0 !== (kind -= 5) && (initializers = staticInitializers = staticInitializers || [])) : (base = Class.prototype, 0 !== kind && (initializers = protoInitializers = protoInitializers || [])), 0 !== kind && !isPrivate) { var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields, existingKind = existingNonFields.get(name) || 0; if (!0 === existingKind || 3 === existingKind && 4 !== kind || 4 === existingKind && 3 !== kind) throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + name); !existingKind && kind > 2 ? existingNonFields.set(name, kind) : existingNonFields.set(name, !0); } applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers); } } pushInitializers(ret, protoInitializers), pushInitializers(ret, staticInitializers); }
function pushInitializers(ret, initializers) { initializers && ret.push(function (instance) { for (var i = 0; i < initializers.length; i++) initializers[i].call(instance); return instance; }); }
function applyClassDecs(ret, targetClass, classDecs) { if (classDecs.length > 0) { for (var initializers = [], newClass = targetClass, name = targetClass.name, i = classDecs.length - 1; i >= 0; i--) { var decoratorFinishedRef = { v: !1 }; try { var nextNewClass = classDecs[i](newClass, { kind: "class", name: name, addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef) }); } finally { decoratorFinishedRef.v = !0; } void 0 !== nextNewClass && (assertValidReturnValue(10, nextNewClass), newClass = nextNewClass); } ret.push(newClass, function () { for (var i = 0; i < initializers.length; i++) initializers[i].call(newClass); }); } }
function _applyDecs(targetClass, memberDecs, classDecs) { var ret = []; return applyMemberDecs(ret, targetClass, memberDecs), applyClassDecs(ret, targetClass, classDecs), ret; }
const SuiteScriptMocks = require("../../index.cjs");
const runtimeStub = require("suitecloud-unit-testing-stubs/stubs/runtime");
const {
  options,
  required
} = require("../../helpers.cjs");
const Script = require("./Script.cjs");
const Session = require("./Session.cjs");
const User = require("./User.cjs");
_dec = options("feature");
_dec2 = required("feature");
class runtime {
  static {
    [_init_isFeatureInEffect] = _applyDecs(this, [[[_dec, _dec2], 0, "isFeatureInEffect"]], []);
  }
  accountId;
  country;
  envType;
  executionContext;
  processorCount;
  queueCount;
  version;
  ContextType = runtimeStub.ContextType;
  EnvType = runtimeStub.EnvType;
  Permission = runtimeStub.Permission;
  Script = Script;
  Session = Session;
  User = User;
  getCurrentScript = () => {
    return SuiteScriptMocks.currentScript;
  };
  getCurrentSession = () => {
    return SuiteScriptMocks.currentSession;
  };
  getCurrentUser = () => {
    return SuiteScriptMocks.currentUser;
  };
  isFeatureInEffect = _init_isFeatureInEffect(this, options => {
    return SuiteScriptMocks.features[options.feature];
  });
}
module.exports = new runtime();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdWl0ZVNjcmlwdE1vY2tzIiwicmVxdWlyZSIsInJ1bnRpbWVTdHViIiwib3B0aW9ucyIsInJlcXVpcmVkIiwiU2NyaXB0IiwiU2Vzc2lvbiIsIlVzZXIiLCJydW50aW1lIiwiYWNjb3VudElkIiwiY291bnRyeSIsImVudlR5cGUiLCJleGVjdXRpb25Db250ZXh0IiwicHJvY2Vzc29yQ291bnQiLCJxdWV1ZUNvdW50IiwidmVyc2lvbiIsIkNvbnRleHRUeXBlIiwiRW52VHlwZSIsIlBlcm1pc3Npb24iLCJnZXRDdXJyZW50U2NyaXB0IiwiY3VycmVudFNjcmlwdCIsImdldEN1cnJlbnRTZXNzaW9uIiwiY3VycmVudFNlc3Npb24iLCJnZXRDdXJyZW50VXNlciIsImN1cnJlbnRVc2VyIiwiaXNGZWF0dXJlSW5FZmZlY3QiLCJmZWF0dXJlcyIsImZlYXR1cmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vY2tzL3J1bnRpbWUvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFN1aXRlU2NyaXB0TW9ja3MgPSByZXF1aXJlKFwiLi4vLi4vaW5kZXguY2pzXCIpXG5jb25zdCBydW50aW1lU3R1YiA9IHJlcXVpcmUoXCJzdWl0ZWNsb3VkLXVuaXQtdGVzdGluZy1zdHVicy9zdHVicy9ydW50aW1lXCIpXG5jb25zdCB7IG9wdGlvbnMsIHJlcXVpcmVkIH0gPSByZXF1aXJlKFwiLi4vLi4vaGVscGVycy5janNcIilcbmNvbnN0IFNjcmlwdCA9IHJlcXVpcmUoXCIuL1NjcmlwdC5janNcIilcbmNvbnN0IFNlc3Npb24gPSByZXF1aXJlKFwiLi9TZXNzaW9uLmNqc1wiKVxuY29uc3QgVXNlciA9IHJlcXVpcmUoXCIuL1VzZXIuY2pzXCIpXG5cbmNsYXNzIHJ1bnRpbWUge1xuICAgIGFjY291bnRJZFxuICAgIGNvdW50cnlcbiAgICBlbnZUeXBlXG4gICAgZXhlY3V0aW9uQ29udGV4dFxuICAgIHByb2Nlc3NvckNvdW50XG4gICAgcXVldWVDb3VudFxuICAgIHZlcnNpb25cblxuICAgIENvbnRleHRUeXBlID0gcnVudGltZVN0dWIuQ29udGV4dFR5cGVcbiAgICBFbnZUeXBlID0gcnVudGltZVN0dWIuRW52VHlwZVxuICAgIFBlcm1pc3Npb24gPSBydW50aW1lU3R1Yi5QZXJtaXNzaW9uXG5cbiAgICBTY3JpcHQgPSBTY3JpcHRcbiAgICBTZXNzaW9uID0gU2Vzc2lvblxuICAgIFVzZXIgPSBVc2VyXG5cbiAgICBnZXRDdXJyZW50U2NyaXB0ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gU3VpdGVTY3JpcHRNb2Nrcy5jdXJyZW50U2NyaXB0O1xuICAgIH1cblxuICAgIGdldEN1cnJlbnRTZXNzaW9uID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gU3VpdGVTY3JpcHRNb2Nrcy5jdXJyZW50U2Vzc2lvbjtcbiAgICB9XG5cbiAgICBnZXRDdXJyZW50VXNlciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIFN1aXRlU2NyaXB0TW9ja3MuY3VycmVudFVzZXI7XG4gICAgfVxuXG4gICAgQG9wdGlvbnMoXCJmZWF0dXJlXCIpXG4gICAgQHJlcXVpcmVkKFwiZmVhdHVyZVwiKVxuICAgIGlzRmVhdHVyZUluRWZmZWN0ID0gKG9wdGlvbnMpID0+IHtcbiAgICAgICAgcmV0dXJuIFN1aXRlU2NyaXB0TW9ja3MuZmVhdHVyZXNbb3B0aW9ucy5mZWF0dXJlXTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IHJ1bnRpbWUoKSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNQSxnQkFBZ0IsR0FBR0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQ25ELE1BQU1DLFdBQVcsR0FBR0QsT0FBTyxDQUFDLDZDQUE2QyxDQUFDO0FBQzFFLE1BQU07RUFBRUUsT0FBTztFQUFFQztBQUFTLENBQUMsR0FBR0gsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQzFELE1BQU1JLE1BQU0sR0FBR0osT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN0QyxNQUFNSyxPQUFPLEdBQUdMLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDeEMsTUFBTU0sSUFBSSxHQUFHTixPQUFPLENBQUMsWUFBWSxDQUFDO0FBQUEsT0ErQjdCRSxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQUEsUUFDbEJDLFFBQVEsQ0FBQyxTQUFTLENBQUM7QUE5QnhCLE1BQU1JLE9BQU8sQ0FBQztFQUFBO0lBQUE7RUFBQTtFQUNWQyxTQUFTO0VBQ1RDLE9BQU87RUFDUEMsT0FBTztFQUNQQyxnQkFBZ0I7RUFDaEJDLGNBQWM7RUFDZEMsVUFBVTtFQUNWQyxPQUFPO0VBRVBDLFdBQVcsR0FBR2QsV0FBVyxDQUFDYyxXQUFXO0VBQ3JDQyxPQUFPLEdBQUdmLFdBQVcsQ0FBQ2UsT0FBTztFQUM3QkMsVUFBVSxHQUFHaEIsV0FBVyxDQUFDZ0IsVUFBVTtFQUVuQ2IsTUFBTSxHQUFHQSxNQUFNO0VBQ2ZDLE9BQU8sR0FBR0EsT0FBTztFQUNqQkMsSUFBSSxHQUFHQSxJQUFJO0VBRVhZLGdCQUFnQixHQUFHLE1BQU07SUFDckIsT0FBT25CLGdCQUFnQixDQUFDb0IsYUFBYTtFQUN6QyxDQUFDO0VBRURDLGlCQUFpQixHQUFHLE1BQU07SUFDdEIsT0FBT3JCLGdCQUFnQixDQUFDc0IsY0FBYztFQUMxQyxDQUFDO0VBRURDLGNBQWMsR0FBRyxNQUFNO0lBQ25CLE9BQU92QixnQkFBZ0IsQ0FBQ3dCLFdBQVc7RUFDdkMsQ0FBQztFQUlEQyxpQkFBaUIsaUNBQUl0QixPQUFPLElBQUs7SUFDN0IsT0FBT0gsZ0JBQWdCLENBQUMwQixRQUFRLENBQUN2QixPQUFPLENBQUN3QixPQUFPLENBQUM7RUFDckQsQ0FBQztBQUNMO0FBRUFDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLElBQUlyQixPQUFPLEVBQUUifQ==